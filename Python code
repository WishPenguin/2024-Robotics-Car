import cv2
import numpy as np
import serial
import os
import sys
import inspect

arduino = serial.Serial('/dev/ttyACM0', 9600)

def execution_path(filename):
    return os.path.join(os.path.dirname(inspect.getfile(sys._getframe(1))), filename)

# Arduino code
def send_command(command):
    arduino.write(command.encode())

def FollowlinePlease(frame):
    width, height = frame.shape[1], frame.shape[0]
    
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower = np.uint8([0, 0, 231])
    upper = np.uint8([180, 18, 255])

    mask = cv2.inRange(hsv, lower, upper)
    edges = cv2.Canny(mask, 75, 250)
    
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 50, maxLineGap=50)

    if lines is not None:
        for i in range(0, len(lines)):
            l = lines[i][0]
            cv2.line(frame, (l[0], l[1]), (l[2], l[3]), (0, 0, 255), 3, cv2.LINE_AA)
    
    # Define the perspective transformation box points
    box_x1 = round(width * .2)  # top left
    box_y1 = round(height * .7)
    box_x2 = round(width * .8)  # top right
    box_y2 = round(height * .7)
    box_x3 = round(width * .1)  # bottom left
    box_y3 = round(height * .9)
    box_x4 = round(width * .9)  # bottom right
    box_y4 = round(height * .9)

    # Mid points on the frame
    mid_x = round(width / 2)
    mid_y = round(height / 2)

    # Change perspective to bird's eye view
    pts1 = np.float32([[box_x1, box_y1], [box_x2, box_y2], [box_x3, box_y3], [box_x4, box_y4]])
    pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])
    matrix = cv2.getPerspectiveTransform(pts1, pts2)
    birds_eye = cv2.warpPerspective(frame, matrix, (width, height))

    grayscale = cv2.cvtColor(birds_eye, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(grayscale, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 95)
    
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 50, maxLineGap=50)
    
    try:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            if x1 < mid_x or x2 < mid_x:
                x1_left, x2_left = x1, x2
                y1_left, y2_left = y1, y2
            elif x1 > mid_x or x2 > mid_x:
                x1_right, x2_right = x1, x2
                y1_right, y2_right = y1, y2

            try:
                x1_mid = int((x1_right + x1_left) / 2)
                x2_mid = int((x2_right + x2_left) / 2)
                
                cv2.line(birds_eye, (mid_x, mid_y - 50), (x2_mid, mid_y + 50), (0, 255, 0), 2)
                cv2.line(birds_eye, (mid_x, mid_y - 50), (mid_x, mid_y + 50), (0, 0, 255), 2)
                
                point_1 = [mid_x, mid_y - 50]
                point_2 = [mid_x, mid_y + 50]
                point_3 = [x2_mid, mid_y + 50]
                
                radian = np.arctan2(point_2[1] - point_1[1], point_2[0] - point_1[0]) - np.arctan2(point_3[1] - point_1[1], point_3[0] - point_1[0])
                angle = (radian * 180 / np.pi)
                
                if angle < -20:
                    send_command('1')  # Turn left
                elif angle > 20:
                    send_command('3')  # Turn right
                elif -25 < angle < 25:
                    send_command('2')  # Go straight
            except NameError:
                continue
            
            cv2.line(birds_eye, (x1, y1), (x2, y2), (0, 0, 255), 2)
    except TypeError:
        print('no lines found')

    drawing_pts = np.array([[[box_x1, box_y1], [box_x2, box_y2], [box_x4, box_y4], [box_x3, box_y3]]], np.int32)
    cv2.polylines(frame, [drawing_pts], True, (0, 255, 0), 3)

    birds_eye = cv2.resize(birds_eye, (320, 240))
    
    return birds_eye, frame

cam = cv2.VideoCapture(0)

while True:
    check, frame = cam.read()
    if not check:
        break

    birds_eye, processed_frame = FollowlinePlease(frame)

    cv2.imshow("Bird's Eye", birds_eye)
    cv2.imshow("Processed Frame", processed_frame)

    key = cv2.waitKey(1)
    if key == 27:
        break

cam.release()
cv2.destroyAllWindows()
